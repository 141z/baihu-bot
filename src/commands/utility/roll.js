// On importe les constructeurs n√©cessaires depuis la biblioth√®que discord.js
// - SlashCommandBuilder : pour cr√©er une commande slash (ex: /roll)
// - EmbedBuilder : pour cr√©er un message enrichi (embed)
const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');

module.exports = {
    // D√©finition de la commande slash avec son nom et sa description
    data: new SlashCommandBuilder()
        .setName('roll') // Nom de la commande que l'utilisateur va taper sur Discord (ex: /roll)
        .setDescription('Lance un d√© entre 0 et 100'), // Description visible quand l'utilisateur tape /roll

    // Fonction ex√©cut√©e lorsqu'un utilisateur utilise la commande
    async execute(interaction) {
        // G√©n√®re un nombre entier al√©atoire entre 0 et 100
        // Math.random() donne un nombre flottant entre 0 (inclus) et 1 (exclu)
        // Math.random() * 101 donne un nombre flottant entre 0 et 100.999...
        // Math.floor(...) arrondit √† l'entier inf√©rieur, donc on obtient un nombre de 0 √† 100 inclus
        const result = Math.floor(Math.random() * 101);

        // On r√©cup√®re le nom d'utilisateur de la personne qui a utilis√© la commande
        const username = interaction.user.username;

        // On r√©cup√®re l'URL de l'avatar de l'utilisateur
        // Le param√®tre dynamic: true permet d'utiliser un avatar anim√© s'il existe (ex: gif)
        const avatarURL = interaction.user.displayAvatarURL({ dynamic: true });

        // Cr√©ation de l'embed personnalis√© pour afficher le r√©sultat
        const embed = new EmbedBuilder()
            .setColor(0xffffff) // Couleur de l'embed (ici blanc, en hexad√©cimal)
            
            // D√©finition de l'ent√™te de l'embed (en haut √† gauche)
            // Le champ `name` affiche le texte
            // Le champ `iconURL` affiche la photo de profil de l'utilisateur √† c√¥t√© du texte
            .setAuthor({
                name: `${username} a lanc√© le d√©`, // Texte affich√© dans l'en-t√™te
                iconURL: avatarURL, // Avatar √† c√¥t√© du nom
            })

            // Affiche l'avatar de l'utilisateur dans le coin sup√©rieur droit de l'embed
            .setThumbnail(avatarURL)

            // Corps du message : affiche le r√©sultat du d√©
            .setDescription(`üé≤ R√©sultat : **${result}**`) // Le r√©sultat est mis en gras avec ** **

            // Pied de page de l'embed, en bas √† droite (texte personnalis√©)
            .setFooter({ text: username }) // R√©affiche le nom de l'utilisateur

            // Ajoute la date et l'heure √† l'embed (en bas √† droite automatiquement)
            .setTimestamp();

        // Envoie l'embed en r√©ponse √† l'utilisateur
        // On envoie un objet avec la cl√© `embeds` qui contient un tableau (ici avec un seul embed)
        await interaction.reply({ embeds: [embed] });
    },
};