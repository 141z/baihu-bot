const {
  SlashCommandBuilder,
  EmbedBuilder,
  PermissionFlagsBits,
} = require('discord.js');

module.exports = {
  // D√©finition de la commande slash
  data: new SlashCommandBuilder()
    .setName('banlist')
    .setDescription('üìã Affiche la liste des utilisateurs bannis avec leurs ID.')
    .setDefaultMemberPermissions(PermissionFlagsBits.BanMembers),

  async execute(interaction) {
    const { guild } = interaction;
    const user = interaction.user;

    // Emojis utilis√©s pour s√©lectionner des utilisateurs (max 10)
    const numberEmojis = ['1Ô∏è‚É£','2Ô∏è‚É£','3Ô∏è‚É£','4Ô∏è‚É£','5Ô∏è‚É£','6Ô∏è‚É£','7Ô∏è‚É£','8Ô∏è‚É£','9Ô∏è‚É£','üîü'];

    // Emojis pour changer de page
    const navigationEmojis = ['‚¨ÖÔ∏è', '‚û°Ô∏è'];

    try {
      // On r√©cup√®re tous les bannis du serveur
      const bans = await guild.bans.fetch();

      if (bans.size === 0) {
        return interaction.reply({
          content: '‚úÖ Aucun utilisateur banni sur ce serveur.',
          ephemeral: true,
        });
      }

      const bannedUsers = bans.map(b => b.user); // liste des utilisateurs bannis
      const perPage = 10; // nombre par page
      let currentPage = 0;

      // Fonction qui cr√©e un embed pour une page donn√©e
      const getPageEmbed = (page) => {
        const start = page * perPage;
        const pageUsers = bannedUsers.slice(start, start + perPage);

        const description = pageUsers
          .map((u, i) => `${numberEmojis[i]} - **${u.tag}** (*${u.id}*)`)
          .join('\n');

        return new EmbedBuilder()
          .setTitle('üî® Utilisateurs bannis')
          .setDescription(description || 'Aucun utilisateur sur cette page.')
          .setColor('White')
          .setFooter({ text: `Page ${page + 1}/${Math.ceil(bannedUsers.length / perPage)}` });
      };

      // Envoie de la premi√®re page
      const message = await interaction.reply({
        embeds: [getPageEmbed(currentPage)],
        fetchReply: true,
      });

      // Fonction pour obtenir les utilisateurs de la page actuelle
      const pageUsers = () =>
        bannedUsers.slice(currentPage * perPage, (currentPage + 1) * perPage);

      // Ajout des r√©actions de s√©lection utilisateur
      for (let i = 0; i < pageUsers().length; i++) {
        await message.react(numberEmojis[i]);
      }

      // Si plusieurs pages, on ajoute les r√©actions de navigation
      if (bannedUsers.length > perPage) {
        await message.react('‚¨ÖÔ∏è');
        await message.react('‚û°Ô∏è');
      }

      // Cr√©ation du collecteur de r√©actions (√©coute uniquement l‚Äôutilisateur qui a lanc√© la commande)
      const collector = message.createReactionCollector({
        time: 60000, // temps d'√©coute : 60 secondes
        filter: (reaction, reactingUser) => reactingUser.id === user.id,
      });

      // Lorsqu'une r√©action est ajout√©e
      collector.on('collect', async (reaction) => {
        const emoji = reaction.emoji.name;

        // üëâ L'utilisateur s√©lectionne un utilisateur de la liste
        if (numberEmojis.includes(emoji)) {
          const index = numberEmojis.indexOf(emoji);
          const targetUser = pageUsers()[index];

          if (!targetUser) return;

          // Envoie un message contenant uniquement l‚ÄôID (copiable facilement)
          await message.channel.send(` \`${targetUser.id}\``);

          return collector.stop(); // on arr√™te apr√®s une s√©lection
        }

        // ‚¨ÖÔ∏è Page pr√©c√©dente
        if (emoji === '‚¨ÖÔ∏è' && currentPage > 0) {
          currentPage--;
        }

        // ‚û°Ô∏è Page suivante
        if (emoji === '‚û°Ô∏è' && (currentPage + 1) * perPage < bannedUsers.length) {
          currentPage++;
        }

        // Met √† jour l‚Äôembed de la page affich√©e
        await message.edit({ embeds: [getPageEmbed(currentPage)] });

        // R√©initialise les r√©actions (efface tout et remet selon la nouvelle page)
        await message.reactions.removeAll();

        // R√©actions pour les utilisateurs
        for (let i = 0; i < pageUsers().length; i++) {
          await message.react(numberEmojis[i]);
        }

        // R√©actions de navigation si n√©cessaire
        if (bannedUsers.length > perPage) {
          await message.react('‚¨ÖÔ∏è');
          await message.react('‚û°Ô∏è');
        }
      });

      // Nettoyage final des r√©actions √† la fin du temps
      collector.on('end', () => {
        message.reactions.removeAll().catch(() => {});
      });

    } catch (err) {
      console.error('‚ùå Erreur dans /banlist :', err);
      await interaction.reply({
        content: '‚ùå Une erreur est survenue lors de l\'ex√©cution de la commande.',
        ephemeral: true,
      });
    }
  },
};