// üì¶ Importation des outils n√©cessaires depuis discord.js
const {
  ChannelType,
  PermissionsBitField,
  EmbedBuilder,
  ActionRowBuilder,
  StringSelectMenuBuilder,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  InteractionType
} = require('discord.js');

// ‚úÖ Petite fonction utilitaire pour r√©pondre en priv√© (√©ph√©m√®re)
function replyEphemeral(interaction, message, options = {}) {
  return interaction.reply({
    content: message,
    ...options,
    flags: 64 // üëÅÔ∏è Remplace "ephemeral: true"
  });
}

module.exports = {
  name: 'interactionCreate',

  /**
   * üì• Fonction d√©clench√©e automatiquement quand une interaction utilisateur est d√©tect√©e
   * Elle peut venir d‚Äôune commande, d‚Äôun bouton, d‚Äôun menu ou d‚Äôun formulaire (modal)
   */
  async execute(interaction, client) {
    // ================================
    // 1Ô∏è‚É£ Gestion des commandes slash
    // ================================
    if (interaction.isChatInputCommand()) {
      const command = client.commands.get(interaction.commandName);
      if (!command) return;

      try {
        await command.execute(interaction);
      } catch (error) {
        console.error(`üí• Erreur dans ${interaction.commandName}`, error);
        await replyEphemeral(interaction, '‚ùå Une erreur est survenue.');
      }
    }

    // ===============================
    // 2Ô∏è‚É£ Gestion des boutons cliqu√©s
    // ===============================
    if (interaction.isButton()) {
      const { guild, member, customId } = interaction;
      const voiceChannel = member.voice.channel;

      // üéØ Cas sp√©cial : Bouton "modifier ma pr√©sentation"
      // ----------------------------------------------------
      if (customId === 'modifier_presentation') {
        // üîÅ Si l'utilisateur clique sur le bouton dans sa pr√©sentation,
        // le bot lui r√©pond gentiment en priv√© avec la commande √† retaper
        return replyEphemeral(interaction, '‚úèÔ∏è Tu peux modifier ta pr√©sentation en retapant la commande `/pr√©sentation`.');
      }

      // üîí Pour tous les autres boutons : on v√©rifie s‚Äôil est bien dans un salon vocal temporaire
      if (!voiceChannel || voiceChannel.type !== ChannelType.GuildVoice) {
        return replyEphemeral(interaction, '‚ùå Tu dois √™tre dans **ton salon vocal temporaire** pour utiliser ce bouton.');
      }

      // üîê V√©rifie si l'utilisateur est bien le propri√©taire du salon (perms : G√©rer le salon)
      const perms = voiceChannel.permissionOverwrites.cache.get(member.id);
      const isOwner = perms?.allow?.has(PermissionsBitField.Flags.ManageChannels);

      if (!isOwner) {
        return replyEphemeral(interaction, 'üö´ Tu n‚Äôes pas le propri√©taire de ce salon.');
      }

      // ‚ñ∂Ô∏è Analyse quel bouton a √©t√© cliqu√©, et agit en cons√©quence
      switch (customId) {
        case 'open':
          await voiceChannel.permissionOverwrites.edit(guild.roles.everyone, {
            Connect: true,
            ViewChannel: true
          });
          return replyEphemeral(interaction, 'üîì Salon **ouvert √† tous**.');

        case 'closed':
          await voiceChannel.permissionOverwrites.edit(guild.roles.everyone, {
            Connect: false,
            ViewChannel: true
          });
          return replyEphemeral(interaction, 'üîí Salon **ferm√©** (visible mais acc√®s restreint).');

        case 'status': {
          const everyonePerms = voiceChannel.permissionOverwrites.cache.get(guild.roles.everyone.id);
          const isVisible = !everyonePerms?.deny?.has(PermissionsBitField.Flags.ViewChannel);
          const isConnectable = !everyonePerms?.deny?.has(PermissionsBitField.Flags.Connect);

          const embed = new EmbedBuilder()
            .setTitle('üìä Statut du salon vocal')
            .addFields(
              { name: 'üëÅÔ∏è Visibilit√©', value: isVisible ? 'Visible' : 'Invisible', inline: true },
              { name: 'üîå Connexion', value: isConnectable ? 'Autoris√©' : 'Refus√©', inline: true },
              { name: 'üåç R√©gion', value: voiceChannel.rtcRegion ?? 'Auto', inline: true },
              { name: 'üìà Ping', value: voiceChannel.rtcRegion ? 'Personnalis√©e' : 'Automatique', inline: true }
            )
            .setColor('White');

          return interaction.reply({ embeds: [embed], flags: 64 });
        }

        case 'transfer': {
          const others = voiceChannel.members.filter(m => m.id !== member.id);
          if (others.size === 0) {
            return replyEphemeral(interaction, '‚ùå Aucun autre membre n‚Äôest connect√© dans ton salon.');
          }

          const menu = new StringSelectMenuBuilder()
            .setCustomId('transfer_owner_to')
            .setPlaceholder('üëë Choisir un nouveau propri√©taire')
            .addOptions(
              others.map(m => ({
                label: m.user.username,
                description: `Transf√©rer √† ${m.user.tag}`,
                value: m.id
              }))
            );

          const row = new ActionRowBuilder().addComponents(menu);

          return interaction.reply({
            content: '√Ä qui veux-tu transf√©rer la propri√©t√© du salon ?',
            components: [row],
            flags: 64
          });
        }

        case 'place': {
          // üìù Ouvre un petit formulaire pour d√©finir la limite de places
          const modal = new ModalBuilder()
            .setCustomId('modal_place_limit')
            .setTitle('üë• Modifier le nombre de places');

          const input = new TextInputBuilder()
            .setCustomId('place_limit_input')
            .setLabel('Nombre de places (entre 1 et 99)')
            .setStyle(TextInputStyle.Short)
            .setRequired(true)
            .setMaxLength(2);

          const row = new ActionRowBuilder().addComponents(input);
          modal.addComponents(row);

          return interaction.showModal(modal);
        }
      }
    }

    // ===============================
    // 3Ô∏è‚É£ Gestion des menus d√©roulants (select)
    // ===============================
    if (interaction.isStringSelectMenu()) {
      const { customId, values, member, guild } = interaction;
      const voiceChannel = member.voice.channel;

      if (!voiceChannel) {
        return replyEphemeral(interaction, '‚ùå Tu n‚Äôes pas dans un salon vocal.');
      }

      if (customId === 'transfer_owner_to') {
        const newOwnerId = values[0];

        // ‚úÖ Donne les droits de gestion au nouveau proprio
        await voiceChannel.permissionOverwrites.edit(newOwnerId, {
          ManageChannels: true,
          Connect: true,
          MuteMembers: true,
          DeafenMembers: true,
          MoveMembers: true,
          Stream: true
        });

        // ‚ùå Retire les droits √† l'ancien
        await voiceChannel.permissionOverwrites.edit(member.id, {
          ManageChannels: false
        });

        const newOwner = await guild.members.fetch(newOwnerId);

        return interaction.update({
          content: `‚úÖ La propri√©t√© du salon a √©t√© transf√©r√©e √† ${newOwner}.`,
          components: []
        });
      }
    }

    // ===============================
    // 4Ô∏è‚É£ Soumission du modal (formulaire "nombre de places")
    // ===============================
    if (interaction.type === InteractionType.ModalSubmit && interaction.customId === 'modal_place_limit') {
      const member = interaction.member;
      const voiceChannel = member.voice.channel;
      const input = interaction.fields.getTextInputValue('place_limit_input');

      if (!voiceChannel) {
        return replyEphemeral(interaction, '‚ùå Tu dois √™tre dans ton salon vocal.');
      }

      const newLimit = parseInt(input);
      if (isNaN(newLimit) || newLimit < 1 || newLimit > 99) {
        return replyEphemeral(interaction, '‚ùå Merci d‚Äôentrer un nombre valide entre 1 et 99.');
      }

      await voiceChannel.setUserLimit(newLimit);
      return replyEphemeral(interaction, `‚úÖ Le salon est maintenant limit√© √† **${newLimit} places**.`);
    }
  }
};