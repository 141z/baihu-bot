var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// src/API.ts
import { Pool } from "undici";
var api = new Pool("https://api.deezer.com");
var get = /* @__PURE__ */ __name(async (path) => {
  const { body } = await api.request({
    path,
    method: "GET"
  });
  const data = await body.json();
  if (data.error) throw new Error(data.error?.message);
  return data;
}, "get");
var getTrack = /* @__PURE__ */ __name(async (id) => get(`/track/${id}`), "getTrack");
var getAlbum = /* @__PURE__ */ __name(async (id) => get(`/album/${id}`), "getAlbum");
var getPlaylist = /* @__PURE__ */ __name(async (id) => get(`/playlist/${id}`), "getPlaylist");

// src/index.ts
import { DisTubeError, InfoExtractorPlugin, Playlist, Song } from "distube";
var SUPPORTED_TYPES = ["album", "playlist", "track"];
var REGEX = /^https?:\/\/(?:www\.)?deezer\.com\/(?:[a-z]{2}\/)?(track|album|playlist)\/(\d+)\/?(?:\?.*?)?$/;
var parseURL = /* @__PURE__ */ __name((url) => {
  const [, type, id] = url.match(REGEX) ?? [];
  return { type, id };
}, "parseURL");
var DeezerPlugin = class extends InfoExtractorPlugin {
  static {
    __name(this, "DeezerPlugin");
  }
  validate(url) {
    if (typeof url !== "string" || !url.includes("deezer")) return false;
    const { type, id } = parseURL(url);
    if (!type || !id || !SUPPORTED_TYPES.includes(type)) return false;
    return true;
  }
  async resolve(url, options) {
    const { type, id } = parseURL(url);
    if (!type || !id) throw new DisTubeError("DEEZER_PLUGIN_INVALID_URL", `Invalid Deezer url: ${url}`);
    const api2 = type === "track" ? getTrack(id) : type === "album" ? getAlbum(id) : getPlaylist(id);
    const data = await api2.catch((e) => {
      throw new DisTubeError("DEEZER_PLUGIN_API_ERROR", e.message);
    });
    if (!data.type || !SUPPORTED_TYPES.includes(data.type)) {
      throw new DisTubeError("DEEZER_PLUGIN_NOT_SUPPORTED", "This deezer link is not supported.");
    }
    if (data.type === "track") {
      return new Song(
        {
          plugin: this,
          source: "deezer",
          playFromSource: false,
          id: data.id.toString(),
          url: data.link,
          name: data.title,
          uploader: {
            name: data.artist.name,
            url: data.artist.link
          },
          thumbnail: data.album.cover_xl || data.album.cover_big || data.album.cover_medium || data.album.cover
        },
        options
      );
    }
    return new Playlist(
      {
        source: "deezer",
        url: data.link,
        name: data.title,
        id: data.id.toString(),
        thumbnail: data.type == "album" ? data.cover_xl || data.cover_big || data.cover_medium || data.cover : data.picture_xl || data.picture_big || data.picture_medium || data.picture,
        songs: data.tracks.data.map(
          (song) => new Song(
            {
              plugin: this,
              source: "deezer",
              playFromSource: false,
              id: song.id.toString(),
              url: song.link,
              name: song.title,
              uploader: {
                name: song.artist.name
              },
              thumbnail: song.album.cover_xl || song.album.cover_big || song.album.cover_medium || song.album.cover
            },
            options
          )
        )
      },
      options
    );
  }
  createSearchQuery(song) {
    return `${song.name} ${song.uploader.name}`;
  }
  getRelatedSongs() {
    return [];
  }
};
var src_default = DeezerPlugin;
export {
  DeezerPlugin,
  src_default as default
};
//# sourceMappingURL=index.mjs.map